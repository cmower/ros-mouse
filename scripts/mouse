#!/usr/bin/env python3
import rospy
import pygame
pygame.init()
from std_msgs.msg import Bool
from sensor_msgs.msg import Joy
from mouse.msg import MouseButton, MouseWheel, MouseMotion

class App:

    def __init__(self, node, width, hz):

        # Set class attributes
        self.node = node
        self.hz = hz
        self.user_quit = False

        # Setup window
        self.width = float(width)
        pygame.display.set_mode((width, width)).fill(pygame.Color('white'))
        pygame.display.set_caption('ROS-Mouse')
        self.clock = pygame.time.Clock()

    def update_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.user_quit = True
                return
            elif event.type == pygame.MOUSEBUTTONUP:
                msg = MouseButton()
                msg.header.stamp = rospy.Time.now()
                msg.pos = event.pos
                msg.button = event.button
                self.node.pubs['mouse_button_up'].publish(msg)
            elif event.type == pygame.MOUSEBUTTONDOWN:
                msg = MouseButton()
                msg.header.stamp = rospy.Time.now()
                msg.pos = event.pos
                msg.button = event.button
                self.node.pubs['mouse_button_down'].publish(msg)
            elif event.type == pygame.MOUSEWHEEL:
                msg = MouseWheel()
                msg.header.stamp = rospy.Time.now()
                msg.x = event.x
                msg.y = event.y
                msg.which = event.which
                msg.flipped = event.flipped
                self.node.pubs['mouse_wheel'].publish(msg)
            elif event.type == pygame.MOUSEMOTION:
                msg = MouseMotion()
                msg.header.stamp = rospy.Time.now()
                msg.pos = event.pos
                msg.rel = event.rel
                msg.buttons = event.buttons
                self.node.pubs['mouse_motion'].publish(msg)

    def publish_mouse_joy(self, pos, rel, pressed):
        msg = Joy()
        msg.header.stamp = rospy.Time.now()
        msg.axes = list(pos) + list(rel) + [float(pos[0])/self.width, float(pos[1])/self.width, float(rel[0])/self.width, float(rel[1])/self.width]
        msg.buttons = pressed
        self.node.pubs['joy'].publish(msg)


    def step(self):
        self.update_events()
        pos = pygame.mouse.get_pos()
        rel = pygame.mouse.get_rel()
        pressed = pygame.mouse.get_pressed()
        self.publish_mouse_joy(pos, rel, pressed)
        self.node.pubs['focused'].publish(Bool(data=pygame.mouse.get_focused()))
        pygame.display.flip()
        self.clock.tick_busy_loop(self.hz)

    def close(self):
        pygame.quit()

class Node:

    def __init__(self):

        # Initialize ROS node
        rospy.init_node('mouse')

        # Setup publishers
        self.pubs = {}
        self.pubs['focused'] = rospy.Publisher('mouse/focused', Bool, queue_size=10)
        self.pubs['joy'] = rospy.Publisher('mouse/joy', Joy, queue_size=10)
        self.pubs['mouse_button_down'] = rospy.Publisher('mouse/buttondown', MouseButton, queue_size=10)
        self.pubs['mouse_button_up'] = rospy.Publisher('mouse/buttonup', MouseButton, queue_size=10)
        self.pubs['mouse_wheel'] = rospy.Publisher('mouse/wheel', MouseWheel, queue_size=10)
        self.pubs['mouse_motion'] = rospy.Publisher('mouse/motion', MouseMotion, queue_size=10)

        # Setup pygame app
        self.app = App(self, rospy.get_param('~screen_width', 500), rospy.get_param('~hz', 50))

    def spin(self):
        while (not rospy.is_shutdown()) and (not self.app.user_quit):
            self.app.step()
        self.app.close()


def main():
    Node().spin()


if __name__ == '__main__':
    main()
